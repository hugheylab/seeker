[{"path":"https://seeker.hugheylab.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 seeker authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://seeker.hugheylab.org/articles/introduction.html","id":"rna-seq-data","dir":"Articles","previous_headings":"","what":"RNA-seq data","title":"Introduction to seeker","text":"seeker package designed wrapper around various command-line R-based tools. main function , well, seeker(), targeted processing bulk RNA-seq data. seeker()’s main argument list parameters specifying steps RNA-seq data processing perform perform . list parameters can come yaml file, example shown . empty template yaml file available system.file('extdata', 'params_template.yml', package = 'seeker'). can copy yaml files working directory like : ’ve already installed system dependencies, installSysDeps(), basic way run seeker() : Beware even minimal example take time.","code":"study: 'PRJNA600892' # [string] metadata:   run: TRUE # [logical]   bioproject: 'PRJNA600892' # [string]   include:     # [named list or NULL]     colname: 'run_accession' # [string]     values: ['SRR10876945', 'SRR10876946'] # [vector]   # exclude # [named list or NULL]     # colname # [string]     # values # [vector] fetch:   run: TRUE # [logical]   # keep # [logical or NULL]   # overwrite # [logical or NULL]   # keepSra # [logical or NULL]   # prefetchCmd # [string or NULL]   # prefetchArgs # [character vector or NULL]   # fasterqdumpCmd # [string or NULL]   # fasterqdumpArgs # [character vector or NULL]   # pigzCmd # [string or NULL]   # pigzArgs # [character vector or NULL] trimgalore:   run: TRUE # [logical]   # keep # [logical or NULL]   # cmd # [string or NULL]   # args # [character vector or NULL]   # pigzCmd # [string or NULL] fastqc:   run: TRUE # [logical]   # keep # [logical or NULL]   # cmd # [string or NULL]   # args # [character vector or NULL] salmon:   run: TRUE # [logical]   indexDir: '~/refgenie_genomes/alias/mm10/salmon_partial_sa_index/default' # [string]   # sampleColname # [string or NULL]   # keep # [logical or NULL]   # cmd # [string or NULL]   # args # [character vector or NULL] multiqc:   run: TRUE # [logical]   # cmd # [string or NULL]   # args # [character vector or NULL] tximport:   run: TRUE # [logical]   tx2gene:     # [named list or NULL]     organism: 'mmusculus' # [string]     # version # [number or NULL]     # filename # [string or NULL]   countsFromAbundance: 'lengthScaledTPM' # [string]   # ignoreTxVersion # [logical or NULL] for (filename in c('PRJNA600892.yml', 'params_template.yml')) {   file.copy(system.file('extdata', filename, package = 'seeker'), '.')} library('seeker') doParallel::registerDoParallel()  yamlPath = 'PRJNA600892.yml' params = yaml::read_yaml(yamlPath) seeker(params)"},{"path":"https://seeker.hugheylab.org/articles/introduction.html","id":"microarray-data","dir":"Articles","previous_headings":"","what":"Microarray data","title":"Introduction to seeker","text":"can use seekerArray() function, can process data NCBI GEO ArrayExpress, can process raw Affymetrix data stored locally. main arguments study geneIdType. example:","code":"library('seeker')  study = 'GSE25585' geneIdType = 'entrez' seekerArray(study, geneIdType)"},{"path":"https://seeker.hugheylab.org/articles/reproducibility.html","id":"rna-seq-data","dir":"Articles","previous_headings":"","what":"RNA-seq data","title":"Reproducibility with seeker","text":"seeker package includes example yaml file, R script, shell script fetching processing subset RNA-seq dataset. ’ll download files GitHub avoid install package locally: PRJNA600892.yml: run_seeker.R: run_seeker.sh: Now simply run shell script: output appear working directory. can follow seeker()’s progress using log file. process different dataset, modify yaml file shell script accordingly. Beware example uses “salmon_partial_sa_index” refgenie minimize computational requirements; actual use recommend “salmon_sa_index”.","code":"urlBase = 'https://raw.githubusercontent.com/hugheylab/seeker/master/inst/extdata/' for (filename in c('PRJNA600892.yml', 'run_seeker.R', 'run_seeker.sh')) {   download.file(paste0(urlBase, filename), filename)} study: 'PRJNA600892' # [string] metadata:   run: TRUE # [logical]   bioproject: 'PRJNA600892' # [string]   include:     # [named list or NULL]     colname: 'run_accession' # [string]     values: ['SRR10876945', 'SRR10876946'] # [vector]   # exclude # [named list or NULL]     # colname # [string]     # values # [vector] fetch:   run: TRUE # [logical]   # keep # [logical or NULL]   # overwrite # [logical or NULL]   # keepSra # [logical or NULL]   # prefetchCmd # [string or NULL]   # prefetchArgs # [character vector or NULL]   # fasterqdumpCmd # [string or NULL]   # fasterqdumpArgs # [character vector or NULL]   # pigzCmd # [string or NULL]   # pigzArgs # [character vector or NULL] trimgalore:   run: TRUE # [logical]   # keep # [logical or NULL]   # cmd # [string or NULL]   # args # [character vector or NULL]   # pigzCmd # [string or NULL] fastqc:   run: TRUE # [logical]   # keep # [logical or NULL]   # cmd # [string or NULL]   # args # [character vector or NULL] salmon:   run: TRUE # [logical]   indexDir: '~/refgenie_genomes/alias/mm10/salmon_partial_sa_index/default' # [string]   # sampleColname # [string or NULL]   # keep # [logical or NULL]   # cmd # [string or NULL]   # args # [character vector or NULL] multiqc:   run: TRUE # [logical]   # cmd # [string or NULL]   # args # [character vector or NULL] tximport:   run: TRUE # [logical]   tx2gene:     # [named list or NULL]     organism: 'mmusculus' # [string]     # version # [number or NULL]     # filename # [string or NULL]   countsFromAbundance: 'lengthScaledTPM' # [string]   # ignoreTxVersion # [logical or NULL] doParallel::registerDoParallel()  cArgs = commandArgs(TRUE) yamlPath = cArgs[1L] parentDir = cArgs[2L]  params = yaml::read_yaml(yamlPath) seeker::seeker(params, parentDir) #!/bin/sh  docker run \\   --mount type=bind,src=`pwd`,dst=/home/rstudio/projects \\   -w /home/rstudio/projects \\   --rm \\   ghcr.io/hugheylab/socker \\   bash -c \\     \"source /home/rstudio/miniconda3/etc/profile.d/conda.sh \\       && conda activate seeker \\       && refgenie pull mm10/salmon_partial_sa_index \\       && Rscript run_seeker.R PRJNA600892.yml .\" \\   &> PRJNA600892_progress.log sh run_seeker.sh"},{"path":"https://seeker.hugheylab.org/articles/reproducibility.html","id":"microarray-data","dir":"Articles","previous_headings":"","what":"Microarray data","title":"Reproducibility with seeker","text":"seeker package also includes example yaml file, R script, shell script fetching processing microarray dataset. Download files working directory: GSE25585.yml: run_seeker_array.R: run_seeker_array.sh: Now simply run shell script: output appear working directory. can follow seekerArray()’s progress using log file. process different dataset, modify yaml file shell script accordingly.","code":"urlBase = 'https://raw.githubusercontent.com/hugheylab/seeker/master/inst/extdata/' for (filename in c('GSE25585.yml', 'run_seeker_array.R', 'run_seeker_array.sh')) {   download.file(paste0(urlBase, filename), filename)} study: 'GSE25585' geneIdType: 'entrez' cArgs = commandArgs(TRUE)  params = yaml::read_yaml(cArgs[1L]) parentDir = cArgs[2L]  seeker::seekerArray(   study = params$study, geneIdType = params$geneIdType,   platform = params$platform, parentDir) #!/bin/sh  docker run \\   --mount type=bind,src=`pwd`,dst=/home/rstudio/projects \\   -w /home/rstudio/projects \\   --rm \\   ghcr.io/hugheylab/socker \\   bash -c \"Rscript run_seeker_array.R GSE25585.yml .\" \\   &> GSE25585_progress.log sh run_seeker_array.sh"},{"path":"https://seeker.hugheylab.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Hughey. Author, maintainer. Josh Schoenbachler. Author.","code":""},{"path":"https://seeker.hugheylab.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughey J, Schoenbachler J (2023). seeker: Simplified Fetching Processing Microarray RNA-Seq Data. R package version 1.1.3, https://github.com/hugheylab/seeker, https://seeker.hugheylab.org.","code":"@Manual{,   title = {seeker: Simplified Fetching and Processing of Microarray and RNA-Seq Data},   author = {Jake Hughey and Josh Schoenbachler},   year = {2023},   note = {R package version 1.1.3, https://github.com/hugheylab/seeker},   url = {https://seeker.hugheylab.org}, }"},{"path":"https://seeker.hugheylab.org/index.html","id":"seeker","dir":"","previous_headings":"","what":"Simplified Fetching and Processing of Microarray and RNA-Seq Data","title":"Simplified Fetching and Processing of Microarray and RNA-Seq Data","text":"seeker R package fetching processing sequencing data, especially RNA-seq data, well microarray data. Hopefully helps get ’re , day die. details, see Schoenbachler Hughey (2022).","code":""},{"path":"https://seeker.hugheylab.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simplified Fetching and Processing of Microarray and RNA-Seq Data","text":"use seeker, can install seeker dependencies, use pre-built Docker image seeker dependencies already installed.","code":""},{"path":"https://seeker.hugheylab.org/index.html","id":"r-package-and-dependencies","dir":"","previous_headings":"Installation","what":"R package and dependencies","title":"Simplified Fetching and Processing of Microarray and RNA-Seq Data","text":"Install BiocManager R package. Install seeker R package, either CRAN Hughey Lab drat repository. use BiocManager::install() order smoothly install seeker’s dependencies Bioconductor. Install system dependencies fetch process sequencing data. simplest way use function installSysDeps(). example, can also use installSysDeps() fetch genomes refgenie, required quantify transcript abundances using salmon.","code":"if (!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install('seeker') # CRAN # BiocManager::install('seeker', site_repository = 'https://hugheylab.github.io/drat/') # drat seeker::installSysDeps('~', '~', '~', '~')"},{"path":"https://seeker.hugheylab.org/index.html","id":"docker-image","dir":"","previous_headings":"Installation","what":"Docker image","title":"Simplified Fetching and Processing of Microarray and RNA-Seq Data","text":"Docker image called socker based rocker/rstudio.","code":"docker pull ghcr.io/hugheylab/socker"},{"path":"https://seeker.hugheylab.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simplified Fetching and Processing of Microarray and RNA-Seq Data","text":"introduction package, read vignette. details, check reference documentation.","code":""},{"path":"https://seeker.hugheylab.org/reference/checkDefaultCommands.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for presence of command-line interfaces — checkDefaultCommands","title":"Check for presence of command-line interfaces — checkDefaultCommands","text":"function checks whether command-line tools used seeker accessible expected places.","code":""},{"path":"https://seeker.hugheylab.org/reference/checkDefaultCommands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for presence of command-line interfaces — checkDefaultCommands","text":"","code":"checkDefaultCommands(keepIdx = FALSE)"},{"path":"https://seeker.hugheylab.org/reference/checkDefaultCommands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for presence of command-line interfaces — checkDefaultCommands","text":"keepIdx Logical indicating whether keep idx column resulting data.table. internal use .","code":""},{"path":"https://seeker.hugheylab.org/reference/checkDefaultCommands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for presence of command-line interfaces — checkDefaultCommands","text":"data.table columns command, path, version.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/fastqc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run FastQC — fastqc","title":"Run FastQC — fastqc","text":"function calls fastqc using system2(). run parallel, register parallel backend, e.g., using doParallel::registerDoParallel().","code":""},{"path":"https://seeker.hugheylab.org/reference/fastqc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run FastQC — fastqc","text":"","code":"fastqc(filepaths, outputDir = \"fastqc_output\", cmd = \"fastqc\", args = NULL)"},{"path":"https://seeker.hugheylab.org/reference/fastqc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run FastQC — fastqc","text":"filepaths Paths fastq files. single-end reads, element single filepath. paired-end reads, element can two filepaths separated \";\". outputDir Directory store output. created exist. cmd Name path command-line interface. args Additional arguments pass command-line interface.","code":""},{"path":"https://seeker.hugheylab.org/reference/fastqc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run FastQC — fastqc","text":"vector exit codes, invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/fastqscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Run FastQ Screen — fastqscreen","title":"Run FastQ Screen — fastqscreen","text":"function calls fastq_screen using system2(). run parallel, register parallel backend, e.g., using doParallel::registerDoParallel().","code":""},{"path":"https://seeker.hugheylab.org/reference/fastqscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run FastQ Screen — fastqscreen","text":"","code":"fastqscreen(   filepaths,   outputDir = \"fastqscreen_output\",   cmd = \"fastq_screen\",   args = c(\"--threads\", foreach::getDoParWorkers(), \"--conf\",     \"~/FastQ_Screen_Genomes/fastq_screen.conf\") )"},{"path":"https://seeker.hugheylab.org/reference/fastqscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run FastQ Screen — fastqscreen","text":"filepaths Paths fastq files. single-end reads, element single filepath. paired-end reads, element can two filepaths separated \";\". outputDir Directory store output. created exist. cmd Name path command-line interface. args Additional arguments pass command-line interface.","code":""},{"path":"https://seeker.hugheylab.org/reference/fastqscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run FastQ Screen — fastqscreen","text":"vector exit codes, invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch files — fetch","title":"Fetch files — fetch","text":"function uses NCBI SRA Toolkit via system2() download files SRA convert fastq.gz. process files parallel, register parallel backend, e.g., using doParallel::registerDoParallel(). Beware intermediate files created fasterq-dump uncompressed require hundreds gigabytes files processed parallel.","code":""},{"path":"https://seeker.hugheylab.org/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch files — fetch","text":"","code":"fetch(   accessions,   outputDir,   overwrite = FALSE,   keepSra = FALSE,   prefetchCmd = \"prefetch\",   prefetchArgs = NULL,   fasterqdumpCmd = \"fasterq-dump\",   fasterqdumpArgs = NULL,   pigzCmd = \"pigz\",   pigzArgs = NULL )"},{"path":"https://seeker.hugheylab.org/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch files — fetch","text":"accessions Character vector SRA run accessions. outputDir String indicating local directory save files. created exist. overwrite Logical indicating whether overwrite files already exist outputDir. keepSra Logical indicating whether keep \".sra\" files. prefetchCmd String indicating command prefetch, downloads \".sra\" files. prefetchArgs Character vector indicating arguments pass prefetch. fasterqdumpCmd String indicating command fasterq-dump, uses \".sra\" files create \".fastq\" files. fasterqdumpArgs Character vector indicating arguments pass fasterq-dump. pigzCmd String indicating command pigz, converts \".fastq\" files \".fastq.gz\" files. pigzArgs Character vector indicating arguments pass pigz.","code":""},{"path":"https://seeker.hugheylab.org/reference/fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch files — fetch","text":"list. function runs, updates tab-delimited log file outputDir called \"progress.tsv\".","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/fetchMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch metadata for a genomic study — fetchMetadata","title":"Fetch metadata for a genomic study — fetchMetadata","text":"function can use API European Nucleotide Archive (recommended) Sequence Read Archive.","code":""},{"path":"https://seeker.hugheylab.org/reference/fetchMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch metadata for a genomic study — fetchMetadata","text":"","code":"fetchMetadata(   bioproject,   host = c(\"ena\", \"sra\"),   fields = c(\"study_accession\", \"sample_accession\", \"secondary_sample_accession\",     \"sample_alias\", \"sample_title\", \"experiment_accession\", \"run_accession\", \"fastq_md5\",     \"fastq_ftp\", \"fastq_aspera\"),   file = NULL )"},{"path":"https://seeker.hugheylab.org/reference/fetchMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch metadata for a genomic study — fetchMetadata","text":"bioproject String indicating bioproject accession. host String indicating fetch metadata. fields Character vector indicating fields fetch, host \"ena\". file String indicating output file path, NULL.","code":""},{"path":"https://seeker.hugheylab.org/reference/fetchMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch metadata for a genomic study — fetchMetadata","text":"data.table.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/getPlatforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get supported microarray platforms — getPlatforms","title":"Get supported microarray platforms — getPlatforms","text":"Get supported microarray platforms","code":""},{"path":"https://seeker.hugheylab.org/reference/getPlatforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get supported microarray platforms — getPlatforms","text":"","code":"getPlatforms(type = c(\"cdf\", \"mapping\"))"},{"path":"https://seeker.hugheylab.org/reference/getPlatforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get supported microarray platforms — getPlatforms","text":"type String indicating whether get supported platforms processing raw Affymetrix data using custom CDF mapping already processed data probes genes.","code":""},{"path":"https://seeker.hugheylab.org/reference/getPlatforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get supported microarray platforms — getPlatforms","text":"data.table.","code":""},{"path":"https://seeker.hugheylab.org/reference/getSalmonMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregrate metadata from salmon quantifications — getSalmonMetadata","title":"Aggregrate metadata from salmon quantifications — getSalmonMetadata","text":"Aggregrate metadata salmon quantifications","code":""},{"path":"https://seeker.hugheylab.org/reference/getSalmonMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregrate metadata from salmon quantifications — getSalmonMetadata","text":"","code":"getSalmonMetadata(inputDir, outputDir = \"data\")"},{"path":"https://seeker.hugheylab.org/reference/getSalmonMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregrate metadata from salmon quantifications — getSalmonMetadata","text":"inputDir Directory contains output salmon. outputDir Directory save result, file named \"salmon_meta_info.csv\". NULL, file saved.","code":""},{"path":"https://seeker.hugheylab.org/reference/getSalmonMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregrate metadata from salmon quantifications — getSalmonMetadata","text":"data.table, invisibly. #' @seealso seeker(), salmon()","code":""},{"path":"https://seeker.hugheylab.org/reference/getTx2gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mapping between transcripts and genes — getTx2gene","title":"Get mapping between transcripts and genes — getTx2gene","text":"function uses biomaRt package.","code":""},{"path":"https://seeker.hugheylab.org/reference/getTx2gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mapping between transcripts and genes — getTx2gene","text":"","code":"getTx2gene(   organism = \"mmusculus\",   version = NULL,   outputDir = \"data\",   checkArgsOnly = FALSE )"},{"path":"https://seeker.hugheylab.org/reference/getTx2gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mapping between transcripts and genes — getTx2gene","text":"organism String used pass paste0(organism, \"_gene_ensembl\") dataset argument biomaRt::useEnsembl(). see available datasets, mart = biomaRt::useEnsembl(\"genes\"); biomaRt::listDatasets(mart). version Passed biomaRt::useEnsembl(). NULL indicates latest version. see available versions, biomaRt::listEnsemblArchives(). outputDir Directory save result, file named \"tx2gene.csv.gz\". NULL, file saved. checkArgsOnly Logical indicating whether check function arguments. Used testing.","code":""},{"path":"https://seeker.hugheylab.org/reference/getTx2gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mapping between transcripts and genes — getTx2gene","text":"checkArgsOnly FALSE, data.table based result biomaRt::getBM(), attribute \"version\". Otherwise 0.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/installCustomCdfPackages.html","id":null,"dir":"Reference","previous_headings":"","what":"Install custom CDF packages — installCustomCdfPackages","title":"Install custom CDF packages — installCustomCdfPackages","text":"Install Brainarray custom CDFs processing raw Affymetrix data. See http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/CDF_download.asp.","code":""},{"path":"https://seeker.hugheylab.org/reference/installCustomCdfPackages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install custom CDF packages — installCustomCdfPackages","text":"","code":"installCustomCdfPackages(pkgs, ver = 25, dryRun = FALSE)"},{"path":"https://seeker.hugheylab.org/reference/installCustomCdfPackages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install custom CDF packages — installCustomCdfPackages","text":"pkgs Character vector package names, e.g., \"hgu133ahsentrezgcdf\". ver Integer version number (25 5 Jan 2021). dryRun Logical indicating whether actually install packages.","code":""},{"path":"https://seeker.hugheylab.org/reference/installCustomCdfPackages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install custom CDF packages — installCustomCdfPackages","text":"character vector URLs, invisibly.","code":""},{"path":"https://seeker.hugheylab.org/reference/installSysDeps.html","id":null,"dir":"Reference","previous_headings":"","what":"Install seeker's system dependencies — installSysDeps","title":"Install seeker's system dependencies — installSysDeps","text":"function installs configures various programs required seeker fetch process RNA-seq data.","code":""},{"path":"https://seeker.hugheylab.org/reference/installSysDeps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install seeker's system dependencies — installSysDeps","text":"","code":"installSysDeps(   sraToolkitDir,   minicondaDir,   refgenieDir,   rprofileDir,   minicondaEnv = \"seeker\",   refgenieGenomes = NULL,   fastqscreenDir = NULL )"},{"path":"https://seeker.hugheylab.org/reference/installSysDeps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install seeker's system dependencies — installSysDeps","text":"sraToolkitDir String indicating directory install SRA Toolkit. Recommended use \"~\", home directory. NULL, Toolkit installed. minicondaDir String indicating directory install Miniconda. Recommended use \"~\", home directory. NULL, Miniconda installed. refgenieDir String indicating directory store directory genome assets refgenie, named \"refgenie_genomes\". Recommended use \"~\", home directory. used minicondaDir NULL. rprofileDir String indicating directory create modify .Rprofile, run R startup. Common options \"~\" \".\". minicondaEnv String indicating name Miniconda environment install various conda packages (fastq-screen, fastqc, multiqc, pigz, refgenie, salmon, trim-galore). refgenieGenomes Character vector indicating genome assets, transcriptome indexes salmon(), pull refgenomes using refgenie. NULL, assets fetched. fastqscreenDir String indicating directory download genomes fastqscreen(). takes long time. NULL, genomes downloaded.","code":""},{"path":"https://seeker.hugheylab.org/reference/installSysDeps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install seeker's system dependencies — installSysDeps","text":"NULL, invisibly","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/multiqc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MultiQC — multiqc","title":"Run MultiQC — multiqc","text":"function calls multiqc using system2().","code":""},{"path":"https://seeker.hugheylab.org/reference/multiqc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MultiQC — multiqc","text":"","code":"multiqc(   parentDir = \".\",   outputDir = \"multiqc_output\",   cmd = \"multiqc\",   args = NULL )"},{"path":"https://seeker.hugheylab.org/reference/multiqc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MultiQC — multiqc","text":"parentDir Directory contains output aggregated. outputDir Directory store output. created exist. cmd Name path command-line interface. args Additional arguments pass command-line interface.","code":""},{"path":"https://seeker.hugheylab.org/reference/multiqc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MultiQC — multiqc","text":"exit code, invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/salmon.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Salmon — salmon","title":"Run Salmon — salmon","text":"function calls salmon using system2(). run parallel, register parallel backend, e.g., using doParallel::registerDoParallel().","code":""},{"path":"https://seeker.hugheylab.org/reference/salmon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Salmon — salmon","text":"","code":"salmon(   filepaths,   samples,   indexDir,   outputDir = \"salmon_output\",   cmd = \"salmon\",   args = c(\"-l A -q --seqBias --gcBias --no-version-check -p\",     foreach::getDoParWorkers()),   compress = TRUE )"},{"path":"https://seeker.hugheylab.org/reference/salmon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Salmon — salmon","text":"filepaths Paths fastq files. single-end reads, element single filepath. paired-end reads, element two filepaths separated \";\". samples Corresponding sample names fastq files. indexDir Directory contains salmon index. outputDir Directory store output. created exist. cmd Name path command-line interface. args Additional arguments pass command-line interface. compress Logical indicating whether gzip quantification file (quant.sf) salmon. affect downstream analysis.","code":""},{"path":"https://seeker.hugheylab.org/reference/salmon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Salmon — salmon","text":"vector exit codes, invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/seeker.html","id":null,"dir":"Reference","previous_headings":"","what":"Process RNA-seq data end to end — seeker","title":"Process RNA-seq data end to end — seeker","text":"function selectively performs various steps process RNA-seq data. See also vignettes: browseVignettes('seeker').","code":""},{"path":"https://seeker.hugheylab.org/reference/seeker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process RNA-seq data end to end — seeker","text":"","code":"seeker(params, parentDir = \".\", dryRun = FALSE)"},{"path":"https://seeker.hugheylab.org/reference/seeker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process RNA-seq data end to end — seeker","text":"params Named list parameters components: study: String used name output directory within parentDir. metadata: Named list components: run: Logical indicating whether fetch metadata. See fetchMetadata(). TRUE, saves file parentDir/study/metadata.csv. FALSE, expects file already exist. unmodified fetched found metadata saved file parentDir/study/metadata_original.csv. Following components checked run TRUE. bioproject: String indicating study's bioproject accession. include: Optional named list specifying rows metadata include processing, components: colname: String indicating column metadata values: Vector indicating values within colname exclude: Optional named list specifying rows metadata exclude processing (superseding include), components: colname: String indicating column metadata values: Vector indicating values within colname fetch: Named list components: run: Logical indicating whether fetch files SRA. See fetch(). TRUE, saves files parentDir/study/fetch_output. Whether TRUE FALSE, expects metadata column \"run_accession\", updates metadata column \"fastq_fetched\" containing paths files parentDir/study/fetch_output. Following components checked run TRUE. keep: Logical indicating whether keep fastq.gz files processing steps completed. NULL indicates TRUE. overwrite: Logical indicating whether overwrite files already exist. NULL indicates use default fetch(). keepSra: Logical indicating whether keep \".sra\" files. NULL indicates use default fetch(). prefetchCmd: String indicating command prefetch, downloads \".sra\" files. NULL indicates use default fetch(). prefetchArgs: Character vector indicating arguments pass prefetch. NULL indicates use default fetch(). fasterqdumpCmd: String indicating command fasterq-dump, uses \".sra\" files create \".fastq\" files. NULL indicates use default fetch(). prefetchArgs: Character vector indicating arguments pass fasterq-dump. NULL indicates use default fetch(). pigzCmd: String indicating command pigz, converts \".fastq\" files \".fastq.gz\" files. NULL indicates use default fetch(). pigzArgs: Character vector indicating arguments pass pigz. NULL indicates use default fetch(). trimgalore: Named list components: run: Logical indicating whether perform quality/adapter trimming reads. See trimgalore(). TRUE, expects metadata column \"fastq_fetched\" containing paths fastq files parentDir/study/fetch_output, saves trimmed files parentDir/study/trimgalore_output, updates metadata column \"fastq_trimmed\". FALSE, expects nothing. Following components checked run TRUE. keep: Logical indicating whether keep trimmed fastq files processing steps completed. NULL indicates TRUE. cmd: Name path command-line interface. NULL indicates use default trimgalore(). args: Additional arguments pass command-line interface. NULL indicates use default trimgalore(). pigzCmd: String indicating command pigz, converts \".fastq\" files \".fastq.gz\" files. NULL indicates use default trimgalore(). fastqc: Named list components: run: Logical indicating whether perform QC reads. See fastqc(). TRUE trimgalore$run TRUE, expects metadata column \"fastq_trimmed\" containing paths fastq files parentDir/study/trimgalore_output. TRUE trimgalore$run FALSE, expects metadata column \"fastq_fetched\" containing paths fastq files parentDir/study/fetch_output. TRUE, saves results parentDir/study/fastqc_output. FALSE, expects nothing. Following components checked run TRUE. keep: Logical indicating whether keep fastqc files processing steps completed. NULL indicates TRUE. cmd: Name path command-line interface. NULL indicates use default fastqc(). args: Additional arguments pass command-line interface. NULL indicates use default fastqc(). salmon: Named list components: run: Logical indicating whether quantify transcript abundances. See salmon(). TRUE trimgalore$run TRUE, expects metadata column \"fastq_trimmed\" containing paths fastq files parentDir/study/trimgalore_output. TRUE trimgalore$run FALSE, expects metadata column \"fastq_fetched\" containing paths fastq files parentDir/study/fetch_output. TRUE, saves results parentDir/study/salmon_output parentDir/study/salmon_meta_info.csv. FALSE, expects nothing. Following components checked run TRUE. indexDir: Directory contains salmon index. sampleColname: String indicating column metadata containing sample ids. NULL indicates \"sample_accession\", work data SRA ENA. keep: Logical indicating whether keep quantification results processing steps completed. NULL indicates TRUE. cmd: Name path command-line interface. NULL indicates use default salmon(). args: Additional arguments pass command-line interface. NULL indicates use default salmon(). multiqc: Named list components: run: Logical indicating whether aggregrate results various processing steps. See multiqc(). TRUE, saves results parentDir/study/multiqc_output. FALSE, expects nothing. Following components checked run TRUE. cmd: Name path command-line interface. NULL indicates use default multiqc(). args: Additional arguments pass command-line interface. NULL indicates use default multiqc(). tximport: Named list components: run: Logical indicating whether summarize transcript- gene-level estimates downstream analysis. See tximport(). TRUE, expects metadata column sampleColname sample ids, expects directory parentDir/study/salmon_output containing directories quantification results, saves results parentDir/study/tximport_output.qs. FALSE, expects nothing. Following components checked run TRUE. tx2gene: Optional named list components: organism: String indicating organism thereby ensembl gene dataset. See getTx2gene(). version: Optional number indicating ensembl version. NULL indicates latest version. See getTx2gene(). filename: Optional string indicating name pre-existing text file parentDir/params$study containing mapping transcripts (first column) genes (second column), column names first row. filename specified, organism version must specified. NULL, saves file parentDir/study/tx2gene.csv.gz. countsFromAbundance: String indicating whether estimate counts using estimated abundances. See tximport::tximport(). ignoreTxVersion: Logical indicating whether version suffix transcript ids. NULL indicates use TRUE. See tximport::tximport(). params can derived yaml file, see vignette(\"introduction\", package = \"seeker\"). yaml representation params saved parentDir/params$study/params.yml. parentDir Directory store output, directory named according params$study. dryRun Logical indicating whether check validity inputs without actually fetching processing data.","code":""},{"path":"https://seeker.hugheylab.org/reference/seeker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process RNA-seq data end to end — seeker","text":"Path output directory parentDir/params$study, invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/seeker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process RNA-seq data end to end — seeker","text":"","code":"if (FALSE) { doParallel::registerDoParallel() params = yaml::read_yaml('my_params.yaml') seeker(params) }"},{"path":"https://seeker.hugheylab.org/reference/seekerArray.html","id":null,"dir":"Reference","previous_headings":"","what":"Process microarray data end to end — seekerArray","title":"Process microarray data end to end — seekerArray","text":"function fetches data metadata NCBI GEO ArrayExpress, processes raw Affymetrix data using RMA custom CDFs Brainarray, maps probes genes. See also vignettes: browseVignettes('seeker').","code":""},{"path":"https://seeker.hugheylab.org/reference/seekerArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process microarray data end to end — seekerArray","text":"","code":"seekerArray(   study,   geneIdType,   platform = NULL,   parentDir = \".\",   metadataOnly = FALSE )"},{"path":"https://seeker.hugheylab.org/reference/seekerArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process microarray data end to end — seekerArray","text":"study String indicating study accession used name output directory within parentDir. Must start \"GSE\", \"E-\", \"LOCAL\". starts \"GSE\", data fetched using GEOquery::getGEO(). starts \"E-\", data fetched using ArrayExpress::getAE(). starts \"LOCAL\", data form cel(.gz) files must directory parentDir/study/raw, parentDir/study must contain file \"sample_metadata.csv\" column sample_id containing names cel(.gz) files without file extension. geneIdType String indicating whether map probes gene IDs Ensembl (\"ensembl\") Entrez (\"entrez\"). platform String indicating GEO-based platform accession raw data. See https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms. necessary study starts \"LOCAL\", starts \"GSE\" study uses multiple platforms. parentDir Directory store output, directory named according study. metadataOnly Logical indicating whether process sample metadata, skip processing expression data.","code":""},{"path":"https://seeker.hugheylab.org/reference/seekerArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process microarray data end to end — seekerArray","text":"Path output directory parentDir/study, invisibly.","code":""},{"path":"https://seeker.hugheylab.org/reference/seekerArray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process microarray data end to end — seekerArray","text":"standard output: naive_expression_set.qs: Initial ExpresssionSet generated GEOquery::getGEO ArrayExpress::ae2bioc(). generally used sample_metadata.csv gene_expression_matrix.qs available. sample_metadata.csv: Table sample metadata. Column sample_id matches colnames gene expression matrix. gene_expression_matrix.qs: Rows correspond genes, columns samples. Expression values log2-transformed. custom_cdf_name.txt: Name custom CDF package used affy::justRMA() process normalize raw Affymetrix data map probes genes. feature_metadata.qs: GPL object, gene expression matrix generated processed data. probe_gene_mapping.csv.gz: Table probes genes, gene expression matrix generated processed data. \"raw\" directory: Contains raw Affymetrix files. params.yml: Parameters used process dataset. session.log: R session information. output may include files NCBI GEO ArrayExpress. Files extension \"qs\" can read R using qs::qread().","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/seekerArray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process microarray data end to end — seekerArray","text":"","code":"if (FALSE) { seekerArray('GSE25585', 'entrez') }"},{"path":"https://seeker.hugheylab.org/reference/trimgalore.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Trim Galore! — trimgalore","title":"Run Trim Galore! — trimgalore","text":"function calls trim_galore using system2(), designed handle standard adapter/quality trimming. run parallel, register parallel backend, e.g., using doParallel::registerDoParallel().","code":""},{"path":"https://seeker.hugheylab.org/reference/trimgalore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Trim Galore! — trimgalore","text":"","code":"trimgalore(   filepaths,   outputDir = \"trimgalore_output\",   cmd = \"trim_galore\",   args = NULL,   pigzCmd = \"pigz\" )"},{"path":"https://seeker.hugheylab.org/reference/trimgalore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Trim Galore! — trimgalore","text":"filepaths Paths fastq files. single-end reads, element single filepath. paired-end reads, element two filepaths separated \";\". outputDir Directory store output. created exist. cmd Name path command-line interface. args Additional arguments pass command-line interface. Output files always compressed. Arguments \"--gzip\", \"--cores\", \"-j\", \"--basename\" allowed. Arguments \"-o\" \"--paired\" specified . pigzCmd String pigz command, gzip output files.","code":""},{"path":"https://seeker.hugheylab.org/reference/trimgalore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Trim Galore! — trimgalore","text":"vector exit codes, invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/reference/tximport.html","id":null,"dir":"Reference","previous_headings":"","what":"Run tximport on RNA-seq quantifications — tximport","title":"Run tximport on RNA-seq quantifications — tximport","text":"function uses tximport package.","code":""},{"path":"https://seeker.hugheylab.org/reference/tximport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run tximport on RNA-seq quantifications — tximport","text":"","code":"tximport(   inputDir,   tx2gene,   samples = NULL,   outputDir = \"data\",   type = c(\"salmon\", \"kallisto\"),   countsFromAbundance = \"lengthScaledTPM\",   ignoreTxVersion = TRUE,   ... )"},{"path":"https://seeker.hugheylab.org/reference/tximport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run tximport on RNA-seq quantifications — tximport","text":"inputDir Directory contains quantification directories. tx2gene NULL data.frame mapping transcripts genes, returned getTx2gene(), passed tximport::tximport(). samples Names quantification directories include. NULL indicates . outputDir Directory save result, file named \"tximport_output.qs\", using qs::qsave(). NULL, file saved. type Passed tximport::tximport(). countsFromAbundance Passed tximport::tximport(). ignoreTxVersion Passed tximport::tximport(). ... Additional arguments passed tximport::tximport().","code":""},{"path":"https://seeker.hugheylab.org/reference/tximport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run tximport on RNA-seq quantifications — tximport","text":"list, returned tximport::tximport(), invisibly.","code":""},{"path":[]},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-113","dir":"Changelog","previous_headings":"","what":"seeker 1.1.3","title":"seeker 1.1.3","text":"CRAN release: 2023-05-23 Updated test fetching metadata . fetchMetadata() now orders result.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-112","dir":"Changelog","previous_headings":"","what":"seeker 1.1.2","title":"seeker 1.1.2","text":"CRAN release: 2023-05-17 Updated test fetching metadata.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-111","dir":"Changelog","previous_headings":"","what":"seeker 1.1.1","title":"seeker 1.1.1","text":"CRAN release: 2023-05-05 Updated test expectations altered column order metadata ENA.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-110","dir":"Changelog","previous_headings":"","what":"seeker 1.1.0","title":"seeker 1.1.0","text":"CRAN release: 2023-03-22 Removed dependency ArrayExpress package.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-1014","dir":"Changelog","previous_headings":"","what":"seeker 1.0.14","title":"seeker 1.0.14","text":"Fixed handling whitespace file paths installing miniconda.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-1013","dir":"Changelog","previous_headings":"","what":"seeker 1.0.13","title":"seeker 1.0.13","text":"CRAN release: 2022-10-20 Updated BioStudies API.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-1012","dir":"Changelog","previous_headings":"","what":"seeker 1.0.12","title":"seeker 1.0.12","text":"fetchMetadata() can now save metadata text file.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-1011","dir":"Changelog","previous_headings":"","what":"seeker 1.0.11","title":"seeker 1.0.11","text":"Revised documentation.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-1010","dir":"Changelog","previous_headings":"","what":"seeker 1.0.10","title":"seeker 1.0.10","text":"CRAN release: 2022-09-19 Revised package CRAN.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-109","dir":"Changelog","previous_headings":"","what":"seeker 1.0.9","title":"seeker 1.0.9","text":"CRAN release: 2022-08-09 Revised “Description” text.y Skipped tests CRAN avoid installation packages.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-108","dir":"Changelog","previous_headings":"","what":"seeker 1.0.8","title":"seeker 1.0.8","text":"Removed default install directories dependencies installSysDeps(). Replaced options(warn=-1) use suppressWarnings(). Updated description text. Revised console printing.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-107","dir":"Changelog","previous_headings":"","what":"seeker 1.0.7","title":"seeker 1.0.7","text":"Added support platforms. Added ability seekerArray() skip processing expression data.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-106","dir":"Changelog","previous_headings":"","what":"seeker 1.0.6","title":"seeker 1.0.6","text":"Added installation snakemake installSysDeps() easier reproducible analyses.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-105","dir":"Changelog","previous_headings":"","what":"seeker 1.0.5","title":"seeker 1.0.5","text":"Added argument installSysDeps() specify directory create modify .Rprofile.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-104","dir":"Changelog","previous_headings":"","what":"seeker 1.0.4","title":"seeker 1.0.4","text":"Skipped “getNaiveEsetAe() supported” test CRAN due BioConductor issues.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-103","dir":"Changelog","previous_headings":"","what":"seeker 1.0.3","title":"seeker 1.0.3","text":"Made getProbeGeneMapping() test check version number mapping package. Revised arguments seekerArray() updated tests vignettes accordingly.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-102","dir":"Changelog","previous_headings":"","what":"seeker 1.0.2","title":"seeker 1.0.2","text":"Set default parent directory seekerArray(). Added custom CDF support platform GPL17400.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-101","dir":"Changelog","previous_headings":"","what":"seeker 1.0.1","title":"seeker 1.0.1","text":"Updated seeker() save unmodified metadata file.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-100","dir":"Changelog","previous_headings":"","what":"seeker 1.0.0","title":"seeker 1.0.0","text":"Updated seeker() output info SRA Toolkit-based dependencies. Revised tests updated version number prepare CRAN submission.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-0009068","dir":"Changelog","previous_headings":"","what":"seeker 0.0.0.9068","title":"seeker 0.0.0.9068","text":"Updated run_seeker.sh use correct conda environment. Updated Reproducibility vignette require local installation R package.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-0009067","dir":"Changelog","previous_headings":"","what":"seeker 0.0.0.9067","title":"seeker 0.0.0.9067","text":"Changed species organism consistency NCBI packages. Added checking parallel backend.","code":""},{"path":"https://seeker.hugheylab.org/news/index.html","id":"seeker-0009062","dir":"Changelog","previous_headings":"","what":"seeker 0.0.0.9062","title":"seeker 0.0.0.9062","text":"Fixed syntax adhere lab code style.","code":""}]
